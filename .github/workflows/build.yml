name: 'Build and publish application'

on:
  push:
    branches:
      - develop
      - main
      - 'release/**'
      - 'feature/**'
      - 'hotfix/**'
    tags:
      - '*'
    paths-ignore:
      - 'README.md'
      - 'docs/*'
      - 'scripts/*'
      - '.vscode/*'

permissions:
  checks: write
  contents: write
  pull-requests: write
  actions: read
  packages: write
  attestations: write
  id-token: write

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  NUGET_CERT_REVOCATION_MODE: offline
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
  PUBLISH_CODECOV: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/main')
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  frontend-test:
    name: Frontend tests
    runs-on: ubuntu-latest

    steps:
    # This is needed to pass linting consistently
    - name: Set GIT to use CRLF
      run: |
        git config --global core.autocrlf true
        git config --global core.eol crlf

    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: lts/*
        check-latest: true

    - name: Run Yarn
      run: yarn --immutable --immutable-cache
      working-directory: ./src/Borealis.Frontend/

    - name: Run frontend linting
      run: |
        yarn lint:js
        yarn lint:css
      working-directory: ./src/Borealis.Frontend/

    - name: Run frontend tests
      run: yarn test:ci
      working-directory: ./src/Borealis.Frontend/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: frontend-test-results
        path: |
          ./src/Borealis.Frontend/test-results/junit.xml
          ./src/Borealis.Frontend/coverage/cobertura-coverage.xml

  net-test:
    name: .NET tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.Build.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Restore NuGet packages
      run: dotnet restore --verbosity minimal

    - name: Run .NET tests
      run: dotnet test --configuration Release

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: net-test-results
        path: |
          ./**/*.trx
          ./**/coverage.cobertura.xml

  test-and-coverage-results:
    name: Publish test and coverage results
    runs-on: ubuntu-latest

    needs: [ net-test, frontend-test ]

    steps:
    # While we don't use sources directly in this job the test reporter wants to check
    # some files through git so we need the sources.
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Download .NET tests results
      uses: actions/download-artifact@v4
      with:
        name: net-test-results
        path: ./

    - name: Publish .NET tests
      uses: dorny/test-reporter@v1
      with:
        name: üß™ .NET test results
        path: ./**/*.trx
        reporter: dotnet-trx

    - name: Create history folder
      run: mkdir ./coverage-history
      working-directory: ./

    - name: Download historial coverage
      uses: dawidd6/action-download-artifact@v7
      with:
        workflow_conclusion: success
        branch: ${{ github.head_ref }}
        name: coverage-history
        path: ./coverage-history
        check_artifacts:  true
        search_artifacts: true
        if_no_artifact_found: ignore

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@v5
      with:
        reports: '../**/{coverage.cobertura,cobertura-coverage}.xml'
        targetdir: 'coverage-report'
        historydir: 'coverage-history'
        reporttypes: 'Html;MarkdownSummary;MarkdownDeltaSummary;Cobertura'
        assemblyfilters: '-xunit*'
        verbosity: 'Info'

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report

    - name: Upload to Codecov
      uses: codecov/codecov-action@v5
      # To save on uploads, only upload coverage from the main branches and PRs
      if: env.PUBLISH_CODECOV
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage-report/Cobertura.xml

    - name: Upload coverage history
      uses: actions/upload-artifact@v4
      with:
        name: coverage-history
        path: coverage-history

    - name: Publish code coverage summary to run
      uses: LouisBrunner/checks-action@v2.0.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        conclusion: ${{ job.status }}
        name: üìù Code coverage
        output: "{\"summary\":\"Summary of code coverage. For more detailed information, download the full artifact from the run.\"}"
        output_text_description_file: ./coverage-report/Summary.md

  net-build:
    name: Build Docker image
    runs-on: ubuntu-latest

    if: startsWith(github.ref, 'refs/tags/')

    needs: [ net-test, frontend-test ]

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable=true
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true
